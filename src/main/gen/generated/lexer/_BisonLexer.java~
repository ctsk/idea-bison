/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package generated.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import info.fluffos.BisonTokenType;

import java.io.IOException;import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_BisonLexer.flex</tt>
 */
public class _BisonLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SC_PROLOGUE = 2;
  public static final int SC_BRACED_CODE = 4;
  public static final int SC_PREDICATE = 6;
  public static final int SC_EPILOGUE = 8;
  public static final int SC_TAG = 10;
  public static final int SC_ESCAPED_CHARACTER = 12;
  public static final int SC_ESCAPED_STRING = 14;
  public static final int SC_ESCAPED_TSTRING = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\12\1\1\1\7\1\66\1\2\22\0\1\12\1\0\1\56\2\0\1\25\1\0\1\55\1\57\1\64"+
    "\1\17\2\0\1\4\1\3\1\16\1\21\11\20\1\13\1\54\1\62\1\15\1\63\1\61\1\0\6\23\21"+
    "\3\1\22\2\3\1\5\1\10\1\6\1\0\1\52\1\0\1\31\1\26\1\34\1\36\1\24\1\41\1\40\1"+
    "\47\1\27\1\3\1\51\1\42\1\45\1\30\1\35\1\44\1\50\1\32\1\14\1\43\1\37\1\11\1"+
    "\3\1\46\1\33\1\3\1\60\1\53\1\65\7\0\1\67\242\0\2\67\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\2\6\1\1\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\2\15\1\0\3\15\1\16\1\15\1\17\1\20"+
    "\4\15\1\21\1\22\1\15\1\23\1\15\1\24\1\15"+
    "\2\0\1\25\5\0\1\26\20\0\1\27\3\0\1\30"+
    "\2\15\1\31\3\15\1\32\1\15\1\16\1\15\1\33"+
    "\1\34\2\25\2\0\1\6\41\0\1\35\1\36\1\37"+
    "\2\15\1\0\3\15\1\0\1\25\47\0\2\15\1\0"+
    "\1\15\22\0\1\40\1\41\12\0\1\42\3\0\1\43"+
    "\1\44\3\0\1\45\5\0\1\46\2\0\1\47\12\0"+
    "\1\50\1\0\1\51\2\0\1\52\2\0\1\53\1\54"+
    "\6\0\1\55\1\0\1\56\3\0\1\57\4\0\1\60"+
    "\1\61\11\0\1\62\1\0\1\63\15\0\1\64\1\65"+
    "\14\0\1\66\1\0\1\67\14\0\1\70\1\0\1\71"+
    "\6\0\1\72\1\73\2\0\1\74\6\0\1\75\7\0"+
    "\1\76\1\77\12\0\1\100\1\101\13\0\1\102\1\0"+
    "\1\103\5\0\1\104\3\0\1\105\4\0\1\106\1\0"+
    "\1\107\1\110\1\111\1\112\2\0\1\105\3\0\1\113"+
    "\1\0\1\114\1\0\1\115\5\0\1\116\4\0\1\117"+
    "\1\120\7\0\1\121\4\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u01f8\0\u01f8\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u01f8\0\u0578\0\u01f8\0\u01f8\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u01f8\0\u06c8\0\u01f8\0\u0700\0\u01f8\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u01f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u01f8\0\u0cb0\0\u0ce8\0\u0d20\0\u01f8\0\u0d58\0\u0d90\0\u01f8"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u04d0\0\u0e70\0\u04d0\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u0ea8\0\u0ee0\0\u0f18\0\u0850\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0"+
    "\0\u17d8\0\u0ee0\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u01f8"+
    "\0\u01f8\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8"+
    "\0\u26f0\0\u2728\0\u2760\0\u01f8\0\u2798\0\u27d0\0\u2808\0\u01f8"+
    "\0\u01f8\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\u01f8\0\u2a38\0\u2a70\0\u01f8\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u01f8\0\u2cd8\0\u01f8\0\u2d10\0\u2d48\0\u01f8\0\u2d80\0\u2db8"+
    "\0\u01f8\0\u01f8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u01f8\0\u2fb0\0\u2fe8\0\u3020\0\u01f8\0\u3058"+
    "\0\u3090\0\u30c8\0\u3100\0\u3138\0\u01f8\0\u3170\0\u31a8\0\u31e0"+
    "\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0"+
    "\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560"+
    "\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u01f8\0\u01f8"+
    "\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870"+
    "\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u01f8\0\u3368\0\u01f8\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\u01f8\0\u3c28\0\u01f8\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u01f8\0\u01f8\0\u3db0\0\u3de8"+
    "\0\u01f8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u01f8"+
    "\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u01f8"+
    "\0\u01f8\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248"+
    "\0\u4280\0\u42b8\0\u42f0\0\u01f8\0\u01f8\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558"+
    "\0\u01f8\0\u4590\0\u01f8\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8"+
    "\0\u01f8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830"+
    "\0\u4868\0\u48a0\0\u48d8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u4910"+
    "\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u01f8\0\u48a0\0\u01f8"+
    "\0\u4a60\0\u01f8\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u01f8"+
    "\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u01f8\0\u01f8\0\u4c90\0\u4cc8"+
    "\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u01f8\0\u4e18\0\u4e50"+
    "\0\u4e88\0\u4ec0\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\12\1\15\1\12\1\13\1\12"+
    "\1\14\1\13\1\16\1\14\1\17\1\20\1\12\1\21"+
    "\1\22\3\14\1\23\24\14\1\24\1\25\1\26\1\27"+
    "\1\30\1\12\1\31\1\12\1\32\3\12\1\13\1\12"+
    "\16\33\1\34\6\33\1\35\42\33\16\36\1\37\6\36"+
    "\1\40\32\36\1\41\1\36\1\42\2\36\1\43\20\36"+
    "\1\37\6\36\1\40\32\36\1\41\1\36\1\42\2\36"+
    "\1\44\2\36\1\45\1\46\1\0\4\45\1\0\56\45"+
    "\2\0\4\47\1\50\55\47\1\51\1\52\4\47\55\53"+
    "\1\54\12\53\56\55\1\56\11\55\56\57\1\60\5\57"+
    "\1\0\3\57\71\0\2\13\4\0\1\13\2\0\1\13"+
    "\53\0\1\13\4\0\2\14\4\0\1\14\2\0\1\14"+
    "\3\0\5\14\1\0\25\14\20\0\1\61\5\0\1\61"+
    "\2\0\1\61\5\0\3\61\1\0\25\61\33\0\1\62"+
    "\1\63\70\0\2\21\66\0\2\21\1\64\23\0\1\64"+
    "\32\0\1\65\2\0\1\66\7\0\1\67\1\70\1\71"+
    "\1\72\1\73\1\0\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\0"+
    "\1\110\10\0\1\111\1\112\11\0\2\14\4\0\1\14"+
    "\2\0\1\14\3\0\5\14\1\0\25\14\4\0\1\113"+
    "\27\0\1\114\43\0\1\115\4\0\25\33\1\0\60\33"+
    "\1\116\1\117\5\33\1\0\42\33\65\0\1\120\2\0"+
    "\60\36\1\0\4\36\1\0\20\36\1\121\1\122\40\36"+
    "\1\0\4\36\1\0\12\36\1\123\47\36\1\0\2\36"+
    "\1\124\1\36\1\0\12\36\1\125\14\36\1\126\32\36"+
    "\1\0\4\36\1\0\2\36\1\45\2\0\4\45\1\0"+
    "\56\45\4\0\1\127\65\0\4\47\1\50\55\47\2\0"+
    "\10\47\1\50\55\47\1\0\5\47\62\0\1\51\5\0"+
    "\55\53\1\0\12\53\56\55\1\0\11\55\56\57\1\0"+
    "\5\57\1\0\3\57\64\0\1\130\6\0\2\61\1\0"+
    "\1\131\2\0\1\61\2\0\1\61\3\0\5\61\1\0"+
    "\25\61\15\0\1\62\1\132\1\133\65\62\17\134\1\135"+
    "\50\134\20\0\2\136\1\0\2\136\1\0\1\136\2\0"+
    "\1\136\2\0\1\136\1\0\1\136\2\0\1\136\52\0"+
    "\1\137\106\0\1\140\5\0\1\141\50\0\1\142\12\0"+
    "\1\143\1\144\50\0\1\145\70\0\1\146\70\0\1\147"+
    "\3\0\1\150\5\0\1\151\50\0\1\152\2\0\1\153"+
    "\71\0\1\154\73\0\1\155\71\0\1\156\54\0\1\157"+
    "\17\0\1\160\53\0\1\161\101\0\1\162\54\0\1\163"+
    "\64\0\1\164\4\0\1\165\3\0\1\166\56\0\1\167"+
    "\6\0\1\170\1\0\1\171\63\0\1\172\1\173\4\0"+
    "\1\174\54\0\1\175\67\0\1\176\44\0\1\177\7\0"+
    "\2\112\45\0\1\200\5\0\1\112\57\0\1\201\74\0"+
    "\1\202\4\0\1\116\2\33\22\116\1\203\42\116\25\204"+
    "\1\205\42\204\1\121\2\36\55\121\1\203\4\121\1\203"+
    "\2\121\60\206\1\205\4\206\1\205\2\206\1\36\1\207"+
    "\7\36\2\123\45\36\1\0\4\36\1\0\1\123\2\36"+
    "\1\210\7\36\2\125\45\36\1\0\4\36\1\0\1\125"+
    "\1\36\1\0\1\132\66\0\17\134\1\211\66\134\1\212"+
    "\1\211\50\134\32\0\1\213\66\0\1\214\62\0\1\215"+
    "\75\0\1\216\101\0\1\217\67\0\1\220\53\0\1\221"+
    "\66\0\1\222\105\0\1\223\26\0\1\224\23\0\1\225"+
    "\21\0\1\226\41\0\1\227\113\0\1\230\57\0\1\231"+
    "\63\0\1\232\71\0\1\233\74\0\1\234\40\0\1\235"+
    "\11\0\1\236\12\0\1\237\60\0\1\240\64\0\1\241"+
    "\72\0\1\242\77\0\1\243\3\0\1\244\62\0\1\245"+
    "\4\0\1\246\51\0\1\247\73\0\1\250\65\0\1\251"+
    "\101\0\1\252\74\0\1\253\50\0\1\254\61\0\1\255"+
    "\2\0\1\256\72\0\1\257\67\0\1\260\66\0\1\261"+
    "\37\0\1\177\1\112\6\0\2\112\45\0\1\200\5\0"+
    "\1\112\1\0\1\203\1\127\1\262\65\203\17\204\1\263"+
    "\5\204\1\205\42\204\17\205\1\264\50\205\17\206\1\265"+
    "\40\206\1\205\4\206\1\205\2\206\2\36\1\40\5\36"+
    "\1\123\47\36\1\0\2\36\1\124\1\36\1\0\4\36"+
    "\1\42\5\36\1\125\14\36\1\126\32\36\1\0\4\36"+
    "\1\0\2\36\16\134\1\132\1\211\50\134\26\0\1\266"+
    "\73\0\1\267\77\0\1\270\62\0\1\271\75\0\1\272"+
    "\50\0\1\273\74\0\1\274\101\0\1\275\50\0\1\276"+
    "\101\0\1\277\3\0\1\300\56\0\1\301\4\0\1\302"+
    "\67\0\1\303\3\0\1\304\57\0\1\305\74\0\1\306"+
    "\77\0\1\307\54\0\1\310\57\0\1\311\107\0\1\312"+
    "\66\0\1\313\63\0\1\314\57\0\1\315\1\0\1\316"+
    "\62\0\1\317\100\0\1\320\36\0\1\321\107\0\1\322"+
    "\67\0\1\323\106\0\1\324\30\0\1\325\123\0\1\326"+
    "\60\0\1\327\103\0\1\330\46\0\1\331\67\0\1\332"+
    "\57\0\1\333\14\0\1\334\72\0\1\335\63\0\1\336"+
    "\63\0\1\337\103\0\1\340\65\0\1\341\32\0\1\127"+
    "\66\0\16\204\1\33\1\263\5\204\1\205\42\204\16\205"+
    "\1\127\1\264\50\205\16\206\1\36\1\265\40\206\1\205"+
    "\4\206\1\205\2\206\35\0\1\342\75\0\1\343\50\0"+
    "\1\344\75\0\1\345\70\0\1\346\70\0\1\347\65\0"+
    "\1\350\64\0\1\351\44\0\1\352\45\0\1\352\41\0"+
    "\1\353\72\0\1\354\54\0\1\355\77\0\1\356\67\0"+
    "\1\357\72\0\1\360\105\0\1\361\51\0\1\362\103\0"+
    "\1\363\63\0\1\364\62\0\1\365\75\0\1\366\57\0"+
    "\1\367\76\0\1\370\64\0\1\371\63\0\1\372\103\0"+
    "\1\373\27\0\1\374\121\0\1\375\75\0\1\376\62\0"+
    "\1\377\73\0\1\u0100\54\0\1\u0101\63\0\1\u0102\110\0"+
    "\1\u0103\46\0\1\u0104\106\0\1\u0105\30\0\1\u0106\45\0"+
    "\1\u0106\41\0\1\u0107\67\0\1\u0108\57\0\1\u0109\116\0"+
    "\1\u010a\30\0\1\u010b\45\0\1\u010b\60\0\1\u010c\57\0"+
    "\1\u010d\65\0\1\u010e\102\0\1\u010f\64\0\1\u0110\56\0"+
    "\1\u0111\53\0\1\u0112\116\0\1\u0113\65\0\1\u0114\56\0"+
    "\1\u0115\71\0\1\u0116\100\0\1\u0117\63\0\1\u0118\54\0"+
    "\1\u0119\105\0\1\u011a\56\0\1\u011b\102\0\1\u011c\27\0"+
    "\1\u011d\45\0\1\u011d\46\0\1\u011e\67\0\1\u011f\65\0"+
    "\1\u0120\44\0\1\u0121\45\0\1\u0122\21\0\1\u0123\121\0"+
    "\1\u0124\55\0\1\u0125\107\0\1\u0126\55\0\1\u0127\61\0"+
    "\1\u0128\100\0\1\u0129\43\0\1\u012a\62\0\1\u012b\45\0"+
    "\1\u012c\57\0\1\u012d\57\0\1\u012e\66\0\1\u012f\62\0"+
    "\1\u0130\100\0\1\u0131\56\0\1\u0132\74\0\1\u0133\62\0"+
    "\1\u0134\67\0\1\u0135\56\0\2\u0136\1\u0137\6\0\1\u0136"+
    "\4\0\1\u0136\2\0\1\u0136\7\0\1\u0136\57\0\1\u0138"+
    "\47\0\1\u0127\116\0\1\u0139\56\0\1\u013a\67\0\1\u013b"+
    "\72\0\1\u013c\64\0\1\u013d\75\0\1\u013e\64\0\1\u013f"+
    "\75\0\1\u0140\67\0\1\u0141\70\0\1\u0142\47\0\1\u0143"+
    "\75\0\1\u0144\66\0\1\u0145\66\0\1\u0146\63\0\1\u0147"+
    "\75\0\1\u0148\67\0\1\u0149\41\0\1\u014a\107\0\1\u014b"+
    "\102\0\1\u014c\44\0\1\u014d\107\0\1\u014e\65\0\1\u014f"+
    "\74\0\1\u0150\44\0\1\u0151\116\0\1\u0152\30\0\1\u0153"+
    "\45\0\1\u0153\31\0\1\u0154\77\0\1\u0155\102\0\1\u0156"+
    "\61\0\1\u0157\62\0\1\u0158\73\0\1\u0159\70\0\1\u015a"+
    "\67\0\1\u015b\67\0\1\u015c\66\0\1\u015d\71\0\1\u015e"+
    "\67\0\1\u015f\67\0\1\u0160\67\0\1\u0161\66\0\1\u0162"+
    "\77\0\1\u0163\70\0\1\u0164\72\0\1\u0165\64\0\1\u0166"+
    "\62\0\1\u0167\76\0\1\u0168\47\0\1\u0169\104\0\1\u016a"+
    "\71\0\1\u016b\71\0\1\u016c\36\0\1\u016d\101\0\1\u016e"+
    "\67\0\1\u016f\73\0\1\u0170\71\0\1\u0171\47\0\1\u0172"+
    "\101\0\1\u0173\75\0\1\u0174\62\0\1\u0175\103\0\1\u0176"+
    "\53\0\1\u0177\103\0\1\u0178\56\0\1\u0179\67\0\1\u017a"+
    "\67\0\1\u017b\64\0\1\u017c\104\0\1\u017d\65\0\1\u017e"+
    "\67\0\1\u017f\56\0\1\u0180\62\0\1\u0181\67\0\1\u0182"+
    "\100\0\1\u0183\75\0\1\u0184\72\0\1\u0185\25\0\1\u0186"+
    "\45\0\1\u0187\45\0\1\u0188\43\0\1\u0187\45\0\1\u0187"+
    "\41\0\1\u0189\111\0\1\u018a\60\0\1\u018b\54\0\1\u018c"+
    "\67\0\1\u018d\110\0\1\u018e\54\0\1\u018f\51\0\1\u0190"+
    "\102\0\1\u0191\53\0\2\u0185\1\u0192\6\0\1\u0185\4\0"+
    "\1\u0185\2\0\1\u0185\7\0\1\u0185\67\0\1\u0193\67\0"+
    "\1\u0194\52\0\1\u0195\74\0\1\u0196\46\0\2\u0197\1\u0198"+
    "\6\0\1\u0197\4\0\1\u0197\2\0\1\u0197\7\0\1\u0197"+
    "\66\0\1\u0199\50\0\1\u019a\100\0\1\u019b\45\0\2\u0192"+
    "\7\0\1\u0192\4\0\1\u0192\2\0\1\u0192\7\0\1\u0192"+
    "\55\0\1\u019c\67\0\1\u019d\51\0\1\u019e\57\0\1\u019f"+
    "\45\0\1\u019f\45\0\1\u01a0\63\0\1\u01a1\67\0\1\u01a2"+
    "\106\0\1\u01a3\65\0\1\u01a4\62\0\1\u01a5\67\0\1\u01a6"+
    "\62\0\1\u01a7\67\0\1\u01a8\74\0\1\u01a9\75\0\1\u01aa"+
    "\31\0\1\u01ab\107\0\1\u01ac\107\0\1\u01ad\37\0\1\u01ae"+
    "\104\0\1\u01af\70\0\1\u01b0\51\0\1\u01b1\77\0\1\u01b2"+
    "\75\0\1\u01b3\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\3\1\2\11\5\1\5\11\3\1\1\0"+
    "\3\1\1\11\1\1\2\11\5\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\0\1\1\5\0\1\11\20\0"+
    "\1\11\3\0\1\11\2\1\1\11\6\1\4\11\1\1"+
    "\2\0\1\1\41\0\3\11\2\1\1\0\3\1\1\0"+
    "\1\1\47\0\2\1\1\0\1\1\22\0\2\11\12\0"+
    "\1\11\3\0\2\11\3\0\1\1\5\0\1\11\2\0"+
    "\1\11\12\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\2\11\6\0\1\1\1\0\1\11\3\0\1\11\4\0"+
    "\1\1\1\11\11\0\1\1\1\0\1\1\15\0\2\11"+
    "\14\0\1\11\1\0\1\11\14\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\1\11\6\0\1\11\7\0\2\11"+
    "\12\0\2\11\13\0\1\11\1\0\1\11\5\0\1\11"+
    "\3\0\1\1\4\0\1\1\1\0\4\11\2\0\1\1"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\5\0\1\11"+
    "\4\0\2\11\7\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _BisonLexer() {
    this((java.io.Reader)null);
  }
  int percent_percent_count = 0;
  int nesting = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = Character.codePointAt(str, n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case SC_PROLOGUE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [220] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 436: break;
            case SC_BRACED_CODE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [203] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 437: break;
            case SC_PREDICATE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [203] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 438: break;
            case SC_EPILOGUE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [225] { yybegin(YYINITIAL); return EPILOGUE_LITERAL; }");
              yybegin(YYINITIAL); return EPILOGUE_LITERAL;
            }  // fall though
            case 439: break;
            case SC_TAG: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [237] { throw new Error(\"unexpected_eof\"); }");
              throw new Error("unexpected_eof");
            }  // fall though
            case 440: break;
            case SC_ESCAPED_CHARACTER: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [175] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 441: break;
            case SC_ESCAPED_STRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [183] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 442: break;
            case SC_ESCAPED_TSTRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [191] { throw new Error(\"Unexpected EOF\"); }");
              throw new Error("Unexpected EOF");
            }  // fall though
            case 443: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            } 
            // fall through
          case 83: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            } 
            // fall through
          case 84: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return ID; }");
            { return ID;
            } 
            // fall through
          case 85: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return new BisonTokenType(\":\"); }");
            { return new BisonTokenType(":");
            } 
            // fall through
          case 86: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return new BisonTokenType(\"=\"); }");
            { return new BisonTokenType("=");
            } 
            // fall through
          case 87: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return INT_LITERAL; }");
            { return INT_LITERAL;
            } 
            // fall through
          case 88: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return new BisonTokenType(\"|\"); }");
            { return new BisonTokenType("|");
            } 
            // fall through
          case 89: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return new BisonTokenType(\";\"); }");
            { return new BisonTokenType(";");
            } 
            // fall through
          case 90: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { yybegin(SC_ESCAPED_CHARACTER); }");
            { yybegin(SC_ESCAPED_CHARACTER);
            } 
            // fall through
          case 91: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { yybegin(SC_ESCAPED_STRING); }");
            { yybegin(SC_ESCAPED_STRING);
            } 
            // fall through
          case 92: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { nesting = 0; yybegin(SC_BRACED_CODE); }");
            { nesting = 0; yybegin(SC_BRACED_CODE);
            } 
            // fall through
          case 93: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { nesting = 0; yybegin(SC_TAG); }");
            { nesting = 0; yybegin(SC_TAG);
            } 
            // fall through
          case 94: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { /* do nothing */ }");
            { /* do nothing */
            } 
            // fall through
          case 95: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { nesting++; }");
            { nesting++;
            } 
            // fall through
          case 96: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { if (--nesting < 0) { yybegin(YYINITIAL); return BRACED_CODE_LITERAL; } }");
            { if (--nesting < 0) { yybegin(YYINITIAL); return BRACED_CODE_LITERAL; }
            } 
            // fall through
          case 97: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { if (--nesting < 0) { yybegin(YYINITIAL); return PREDICATE; } }");
            { if (--nesting < 0) { yybegin(YYINITIAL); return PREDICATE; }
            } 
            // fall through
          case 98: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { nesting += yylength(); }");
            { nesting += yylength();
            } 
            // fall through
          case 99: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { if (--nesting < 0) { yybegin(YYINITIAL); return TAG_TAG; } }");
            { if (--nesting < 0) { yybegin(YYINITIAL); return TAG_TAG; }
            } 
            // fall through
          case 100: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { yybegin(YYINITIAL); return CHAR_LITERAL; }");
            { yybegin(YYINITIAL); return CHAR_LITERAL;
            } 
            // fall through
          case 101: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { yybegin(YYINITIAL); return STRING; }");
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 102: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return COMMENT; }");
            { return COMMENT;
            } 
            // fall through
          case 103: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { if(++percent_percent_count == 2) yybegin(SC_EPILOGUE); return new BisonTokenType(\"%%\"); }");
            { if(++percent_percent_count == 2) yybegin(SC_EPILOGUE); return new BisonTokenType("%%");
            } 
            // fall through
          case 104: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { yybegin(SC_PROLOGUE); }");
            { yybegin(SC_PROLOGUE);
            } 
            // fall through
          case 105: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return TAG_NONE; }");
            { return TAG_NONE;
            } 
            // fall through
          case 106: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { yybegin(YYINITIAL); return PROLOGUE_LITERAL; }");
            { yybegin(YYINITIAL); return PROLOGUE_LITERAL;
            } 
            // fall through
          case 107: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { nesting--; }");
            { nesting--;
            } 
            // fall through
          case 108: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { yybegin(YYINITIAL); return TSTRING; }");
            { yybegin(YYINITIAL); return TSTRING;
            } 
            // fall through
          case 109: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return BRACKETED_ID; }");
            { return BRACKETED_ID;
            } 
            // fall through
          case 110: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { nesting = 0; yybegin(SC_PREDICATE); }");
            { nesting = 0; yybegin(SC_PREDICATE);
            } 
            // fall through
          case 111: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { yybegin(SC_ESCAPED_TSTRING); }");
            { yybegin(SC_ESCAPED_TSTRING);
            } 
            // fall through
          case 112: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return TAG_ANY; }");
            { return TAG_ANY;
            } 
            // fall through
          case 113: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return BisonTokenType.directive(\"yacc\"); }");
            { return BisonTokenType.directive("yacc");
            } 
            // fall through
          case 114: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return BisonTokenType.directive (\"CODE\"); }");
            { return BisonTokenType.directive ("CODE");
            } 
            // fall through
          case 115: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return BisonTokenType.directive(\"LEFT\"); }");
            { return BisonTokenType.directive("LEFT");
            } 
            // fall through
          case 116: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return BisonTokenType.directive(\"TOKEN\"); }");
            { return BisonTokenType.directive("TOKEN");
            } 
            // fall through
          case 117: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return BisonTokenType.directive(\"type\"); }");
            { return BisonTokenType.directive("type");
            } 
            // fall through
          case 118: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return BisonTokenType.directive(\"prec\"); }");
            { return BisonTokenType.directive("prec");
            } 
            // fall through
          case 119: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return BisonTokenType.directive(\"start\"); }");
            { return BisonTokenType.directive("start");
            } 
            // fall through
          case 120: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return BisonTokenType.directive(\"EMPTY\"); }");
            { return BisonTokenType.directive("EMPTY");
            } 
            // fall through
          case 121: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return BisonTokenType.directive(\"NTERM\"); }");
            { return BisonTokenType.directive("NTERM");
            } 
            // fall through
          case 122: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return BisonTokenType.directive(\"right\"); }");
            { return BisonTokenType.directive("right");
            } 
            // fall through
          case 123: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return BisonTokenType.directive (\"DEBUG\"); }");
            { return BisonTokenType.directive ("DEBUG");
            } 
            // fall through
          case 124: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return BisonTokenType.directive(\"DPREC\"); }");
            { return BisonTokenType.directive("DPREC");
            } 
            // fall through
          case 125: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return BisonTokenType.directive(\"union\"); }");
            { return BisonTokenType.directive("union");
            } 
            // fall through
          case 126: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return BisonTokenType.directive(\"token\"); }");
            { return BisonTokenType.directive("token");
            } 
            // fall through
          case 127: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return BisonTokenType.directive(\"param\"); }");
            { return BisonTokenType.directive("param");
            } 
            // fall through
          case 128: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return BisonTokenType.directive(\"MERGE\"); }");
            { return BisonTokenType.directive("MERGE");
            } 
            // fall through
          case 129: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return BisonTokenType.directive(\"EXPECT\"); }");
            { return BisonTokenType.directive("EXPECT");
            } 
            // fall through
          case 130: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return BisonTokenType.directive(\"BINARY\"); }");
            { return BisonTokenType.directive("BINARY");
            } 
            // fall through
          case 131: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return BisonTokenType.directive(\"OUTPUT\"); }");
            { return BisonTokenType.directive("OUTPUT");
            } 
            // fall through
          case 132: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return BisonTokenType.directive(\"DEFINE\"); }");
            { return BisonTokenType.directive("DEFINE");
            } 
            // fall through
          case 133: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return BisonTokenType.directive(\"HEADER\"); }");
            { return BisonTokenType.directive("HEADER");
            } 
            // fall through
          case 134: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return BisonTokenType.directive(\"VERBOSE\"); }");
            { return BisonTokenType.directive("VERBOSE");
            } 
            // fall through
          case 135: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return BisonTokenType.directive(\"REQUIRE\"); }");
            { return BisonTokenType.directive("REQUIRE");
            } 
            // fall through
          case 136: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return BisonTokenType.directive(\"%output\"); }");
            { return BisonTokenType.directive("%output");
            } 
            // fall through
          case 137: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return BisonTokenType.directive(\"PRINTER\"); }");
            { return BisonTokenType.directive("PRINTER");
            } 
            // fall through
          case 138: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return BisonTokenType.directive(\"SKELETON\"); }");
            { return BisonTokenType.directive("SKELETON");
            } 
            // fall through
          case 139: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return BisonTokenType.directive(\"NO_LINES\"); }");
            { return BisonTokenType.directive("NO_LINES");
            } 
            // fall through
          case 140: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return BisonTokenType.directive(\"nonassoc\"); }");
            { return BisonTokenType.directive("nonassoc");
            } 
            // fall through
          case 141: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return BisonTokenType.directive(\"%no-lines\"); }");
            { return BisonTokenType.directive("%no-lines");
            } 
            // fall through
          case 142: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return BisonTokenType.directive(\"LANGUAGE\"); }");
            { return BisonTokenType.directive("LANGUAGE");
            } 
            // fall through
          case 143: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return BisonTokenType.directive(\"EXPECT_RR\"); }");
            { return BisonTokenType.directive("EXPECT_RR");
            } 
            // fall through
          case 144: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return BisonTokenType.directive(\"expect-rr\"); }");
            { return BisonTokenType.directive("expect-rr");
            } 
            // fall through
          case 145: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return BisonTokenType.directive(\"lex-param\"); }");
            { return BisonTokenType.directive("lex-param");
            } 
            // fall through
          case 146: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return BisonTokenType.directive(\"locations\"); }");
            { return BisonTokenType.directive("locations");
            } 
            // fall through
          case 147: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return BisonTokenType.directive(\"DESTRUCTOR\"); }");
            { return BisonTokenType.directive("DESTRUCTOR");
            } 
            // fall through
          case 148: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return BisonTokenType.directive(\"GLR_PARSER\"); }");
            { return BisonTokenType.directive("GLR_PARSER");
            } 
            // fall through
          case 149: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return BisonTokenType.directive(\"PRECEDENCE\"); }");
            { return BisonTokenType.directive("PRECEDENCE");
            } 
            // fall through
          case 150: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return BisonTokenType.directive(\"NAME_PREFIX\"); }");
            { return BisonTokenType.directive("NAME_PREFIX");
            } 
            // fall through
          case 151: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return BisonTokenType.directive(\"FILE-PREFIX\"); }");
            { return BisonTokenType.directive("FILE-PREFIX");
            } 
            // fall through
          case 152: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return BisonTokenType.directive(\"TOKEN_TABLE\"); }");
            { return BisonTokenType.directive("TOKEN_TABLE");
            } 
            // fall through
          case 153: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return BisonTokenType.directive(\"%token-table\"); }");
            { return BisonTokenType.directive("%token-table");
            } 
            // fall through
          case 154: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return BisonTokenType.directive(\"parse-param\"); }");
            { return BisonTokenType.directive("parse-param");
            } 
            // fall through
          case 155: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return BisonTokenType.directive(\"PURE_PARSER\"); }");
            { return BisonTokenType.directive("PURE_PARSER");
            } 
            // fall through
          case 156: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return BisonTokenType.directive(\"DEFAULT_PREC\"); }");
            { return BisonTokenType.directive("DEFAULT_PREC");
            } 
            // fall through
          case 157: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return BisonTokenType.directive(\"PERCENT_FILE_PREFIX\"); }");
            { return BisonTokenType.directive("PERCENT_FILE_PREFIX");
            } 
            // fall through
          case 158: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return BisonTokenType.directive(\"ERROR_VERBOSE\"); }");
            { return BisonTokenType.directive("ERROR_VERBOSE");
            } 
            // fall through
          case 159: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return BisonTokenType.directive(\"INITIAL_ACTION\"); }");
            { return BisonTokenType.directive("INITIAL_ACTION");
            } 
            // fall through
          case 160: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return BisonTokenType.directive(\"NO_DEFAULT_PREC\"); }");
            { return BisonTokenType.directive("NO_DEFAULT_PREC");
            } 
            // fall through
          case 161: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return BisonTokenType.directive(\"%no-default-prec\"); }");
            { return BisonTokenType.directive("%no-default-prec");
            } 
            // fall through
          case 162: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return BisonTokenType.directive(\"%output \\\"y.tab.c\\\"\"); }");
            { return BisonTokenType.directive("%output \"y.tab.c\"");
            } 
            // fall through
          case 163: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return BisonTokenType.directive(\"NONDETERMINISTIC_PARSER\"); }");
            { return BisonTokenType.directive("NONDETERMINISTIC_PARSER");
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _BisonLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _BisonLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _BisonLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
