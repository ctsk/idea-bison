/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package generated.lexer;

import com.intellij.psi.tree.IElementType;
import info.fluffos.BisonTokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_BisonLexer.flex</tt>
 */
public class _BisonLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SC_PROLOGUE = 2;
  public static final int SC_BRACED_CODE = 4;
  public static final int SC_PREDICATE = 6;
  public static final int SC_EPILOGUE = 8;
  public static final int SC_TAG = 10;
  public static final int SC_COMMENT = 12;
  public static final int SC_LINE_COMMENT = 14;
  public static final int SC_ESCAPED_CHARACTER = 16;
  public static final int SC_ESCAPED_STRING = 18;
  public static final int SC_ESCAPED_TSTRING = 20;
  public static final int SC_STRING = 22;
  public static final int SC_CHARACTER = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\12\1\1\1\7\1\61\1\2\22\0\1\12\1\0\1\56\2\0\1\25\1\0\1\55\1\57\1\66"+
    "\1\17\2\0\1\4\1\3\1\16\1\21\11\20\1\13\1\54\1\64\1\15\1\65\1\63\1\0\6\23\21"+
    "\3\1\22\2\3\1\5\1\10\1\6\1\0\1\52\1\0\1\31\1\26\1\34\1\36\1\24\1\41\1\40\1"+
    "\47\1\27\1\3\1\51\1\42\1\45\1\30\1\35\1\44\1\50\1\32\1\14\1\43\1\37\1\11\1"+
    "\3\1\46\1\33\1\3\1\60\1\53\1\67\7\0\1\62\242\0\2\62\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\2\6\1\1\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\3\0\1\15\1\16\4\17\1\15\1\16\1\20"+
    "\1\17\1\21\1\22\3\17\1\23\1\24\1\0\1\25"+
    "\1\17\1\26\1\17\1\27\1\17\1\0\1\30\1\17"+
    "\1\25\1\17\1\0\1\31\2\0\1\32\5\0\1\33"+
    "\20\0\1\34\3\0\1\35\2\0\1\36\1\37\1\40"+
    "\1\0\1\36\1\37\1\0\1\41\2\0\1\42\1\30"+
    "\2\0\1\43\2\32\2\0\1\6\41\0\1\44\1\45"+
    "\1\46\1\47\5\0\1\31\4\0\1\32\77\0\1\50"+
    "\1\51\12\0\1\52\3\0\1\53\1\54\3\0\1\55"+
    "\5\0\1\31\1\0\1\31\2\0\1\56\2\0\1\57"+
    "\12\0\1\60\1\0\1\61\2\0\1\62\2\0\1\63"+
    "\1\64\6\0\1\65\1\0\1\66\3\0\1\67\6\0"+
    "\1\70\1\71\11\0\1\72\1\0\1\73\15\0\1\74"+
    "\1\75\14\0\1\76\1\0\1\77\14\0\1\100\1\0"+
    "\1\101\6\0\1\102\1\103\2\0\1\104\6\0\1\105"+
    "\7\0\1\106\1\107\12\0\1\110\1\111\13\0\1\112"+
    "\1\0\1\113\5\0\1\114\3\0\1\115\4\0\1\116"+
    "\1\0\1\117\1\120\1\121\1\122\2\0\1\115\3\0"+
    "\1\123\1\0\1\124\1\0\1\125\5\0\1\126\4\0"+
    "\1\127\1\130\7\0\1\131\4\0\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u02d8\0\u02d8\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u02d8\0\u02d8\0\u02d8\0\u02d8\0\u02d8\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u0508\0\u0508\0\u02d8\0\u05b0\0\u05e8\0\u0620\0\u02d8"+
    "\0\u02d8\0\u02d8\0\u0658\0\u02d8\0\u02d8\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\u02d8\0\u0770\0\u07a8\0\u07e0\0\u02d8\0\u0818\0\u02d8"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u02d8\0\u0930\0\u0968\0\u02d8"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u02d8\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u02d8\0\u0ee0\0\u0f18\0\u0f50\0\u02d8\0\u0f88\0\u0fc0"+
    "\0\u0508\0\u0508\0\u02d8\0\u0ff8\0\u02d8\0\u02d8\0\u1030\0\u02d8"+
    "\0\u1068\0\u10a0\0\u02d8\0\u02d8\0\u10d8\0\u1110\0\u02d8\0\u02d8"+
    "\0\u1148\0\u1180\0\u11b8\0\u0a80\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u02d8\0\u02d8\0\u02d8"+
    "\0\u02d8\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u10d8\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1180\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u05e8\0\u0620\0\u0658\0\u23a8\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u02d8\0\u02d8\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u02d8"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u02d8\0\u02d8\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2cd8\0\u2d10"+
    "\0\u1a78\0\u2d48\0\u2d80\0\u02d8\0\u2db8\0\u2df0\0\u02d8\0\u2e28"+
    "\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8"+
    "\0\u3020\0\u02d8\0\u3058\0\u02d8\0\u3090\0\u30c8\0\u02d8\0\u3100"+
    "\0\u3138\0\u02d8\0\u02d8\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250"+
    "\0\u3288\0\u32c0\0\u32f8\0\u02d8\0\u3330\0\u3368\0\u33a0\0\u02d8"+
    "\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u02d8"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8"+
    "\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68"+
    "\0\u3aa0\0\u02d8\0\u02d8\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8"+
    "\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u02d8"+
    "\0\u3758\0\u02d8\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90"+
    "\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u02d8\0\u4018"+
    "\0\u02d8\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u02d8"+
    "\0\u02d8\0\u41a0\0\u41d8\0\u02d8\0\u4210\0\u4248\0\u4280\0\u42b8"+
    "\0\u42f0\0\u4328\0\u02d8\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440"+
    "\0\u4478\0\u44b0\0\u02d8\0\u02d8\0\u44e8\0\u4520\0\u4558\0\u4590"+
    "\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u02d8\0\u02d8"+
    "\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0"+
    "\0\u48d8\0\u4910\0\u4948\0\u02d8\0\u4980\0\u02d8\0\u49b8\0\u49f0"+
    "\0\u4a28\0\u4a60\0\u4a98\0\u02d8\0\u4ad0\0\u4b08\0\u4b40\0\u4b78"+
    "\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u02d8\0\u02d8"+
    "\0\u02d8\0\u02d8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18"+
    "\0\u02d8\0\u4c90\0\u02d8\0\u4e50\0\u02d8\0\u4e88\0\u4ec0\0\u4ef8"+
    "\0\u4f30\0\u4f68\0\u02d8\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u02d8"+
    "\0\u02d8\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0"+
    "\0\u02d8\0\u5208\0\u5240\0\u5278\0\u52b0\0\u02d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\20\1\16\1\21\1\16\1\17\1\16"+
    "\1\20\1\17\1\22\1\20\1\23\1\24\1\16\1\25"+
    "\1\26\3\20\1\27\24\20\1\30\1\31\1\32\1\33"+
    "\1\34\1\16\1\35\1\17\2\16\1\36\3\16\16\37"+
    "\1\40\6\37\1\41\27\37\1\42\1\43\11\37\1\44"+
    "\1\45\1\0\4\44\1\0\6\44\1\46\6\44\1\47"+
    "\27\44\1\50\1\51\1\44\1\52\2\0\1\44\1\53"+
    "\2\44\1\54\1\44\1\45\1\0\4\44\1\0\6\44"+
    "\1\46\6\44\1\47\27\44\1\50\1\51\1\44\1\52"+
    "\2\0\1\44\1\53\2\44\1\55\1\56\1\45\1\0"+
    "\4\56\1\0\51\56\2\0\5\56\4\57\1\60\57\57"+
    "\1\61\1\62\2\57\17\7\1\63\50\7\1\56\1\64"+
    "\1\0\4\56\1\0\51\56\2\0\5\56\55\65\1\66"+
    "\12\65\56\67\1\70\11\67\56\71\1\72\7\71\1\0"+
    "\1\71\1\44\1\73\1\0\4\44\1\0\1\74\45\44"+
    "\1\75\2\44\2\0\6\44\1\73\1\0\4\44\1\0"+
    "\1\76\44\44\1\75\3\44\2\0\5\44\71\0\2\17"+
    "\4\0\1\17\2\0\1\17\46\0\1\17\7\0\2\77"+
    "\2\20\4\0\1\20\1\77\1\100\1\20\1\0\1\101"+
    "\1\0\5\20\1\0\25\20\6\0\1\77\11\0\1\102"+
    "\5\0\1\102\2\0\1\102\5\0\3\102\1\0\25\102"+
    "\33\0\1\103\1\104\70\0\2\25\66\0\2\25\1\105"+
    "\23\0\1\105\32\0\1\106\2\0\1\107\7\0\1\110"+
    "\1\111\1\112\1\113\1\114\1\0\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\0\1\131\10\0\1\132\2\0\1\133\5\0"+
    "\2\77\2\20\4\0\1\20\1\77\1\100\1\20\1\0"+
    "\1\101\1\0\5\20\1\0\25\20\4\0\1\134\1\0"+
    "\1\77\25\0\1\135\45\0\1\136\2\0\25\37\1\137"+
    "\52\37\1\140\5\37\1\141\1\142\5\37\1\137\67\37"+
    "\1\137\41\37\1\143\2\0\1\44\75\0\1\144\5\0"+
    "\1\145\1\146\60\0\1\147\54\0\1\150\12\0\1\151"+
    "\14\0\1\52\36\0\1\44\3\0\1\56\2\0\4\56"+
    "\1\0\51\56\2\0\5\56\4\57\1\60\57\57\2\0"+
    "\6\57\1\60\57\57\1\0\3\57\64\0\1\61\3\0"+
    "\10\7\1\152\5\7\1\75\1\63\50\7\2\0\1\75"+
    "\65\0\55\65\1\0\12\65\56\67\1\0\11\67\56\71"+
    "\1\0\7\71\1\0\1\71\66\0\1\153\3\0\1\154"+
    "\143\0\1\44\66\0\1\44\13\0\2\77\6\0\2\77"+
    "\1\100\2\0\1\101\42\0\1\77\24\0\1\155\1\156"+
    "\53\0\2\102\1\0\1\157\2\0\1\102\2\0\1\102"+
    "\3\0\5\102\1\0\25\102\15\0\1\103\1\160\1\161"+
    "\65\103\17\162\1\163\50\162\20\0\2\164\1\0\2\164"+
    "\1\0\1\164\2\0\1\164\2\0\1\164\1\0\1\164"+
    "\2\0\1\164\52\0\1\165\106\0\1\166\5\0\1\167"+
    "\50\0\1\170\12\0\1\171\1\172\50\0\1\173\70\0"+
    "\1\174\70\0\1\175\3\0\1\176\5\0\1\177\50\0"+
    "\1\200\2\0\1\201\71\0\1\202\73\0\1\203\71\0"+
    "\1\204\54\0\1\205\17\0\1\206\53\0\1\207\101\0"+
    "\1\210\54\0\1\211\64\0\1\212\4\0\1\213\3\0"+
    "\1\214\56\0\1\215\6\0\1\216\1\0\1\217\63\0"+
    "\1\220\1\221\4\0\1\222\54\0\1\223\67\0\1\224"+
    "\44\0\1\225\7\0\2\133\45\0\1\226\1\133\64\0"+
    "\1\227\76\0\1\230\2\0\25\37\1\137\41\37\1\231"+
    "\1\37\1\232\7\37\2\140\12\37\1\137\33\37\1\140"+
    "\6\37\1\0\1\233\7\0\2\144\46\0\1\144\7\0"+
    "\1\234\7\0\2\147\46\0\1\147\7\0\1\235\7\0"+
    "\2\151\46\0\1\151\6\0\1\7\1\236\7\7\2\152"+
    "\4\7\1\63\41\7\1\152\6\7\1\155\2\77\10\155"+
    "\1\237\2\155\1\240\51\155\17\241\1\242\50\241\1\0"+
    "\1\160\66\0\17\162\1\243\66\162\1\244\1\243\50\162"+
    "\32\0\1\245\66\0\1\246\62\0\1\247\75\0\1\250"+
    "\101\0\1\251\67\0\1\252\53\0\1\253\66\0\1\254"+
    "\105\0\1\255\26\0\1\256\23\0\1\257\21\0\1\260"+
    "\41\0\1\261\113\0\1\262\57\0\1\263\63\0\1\264"+
    "\71\0\1\265\74\0\1\266\40\0\1\267\11\0\1\270"+
    "\12\0\1\271\60\0\1\272\64\0\1\273\72\0\1\274"+
    "\77\0\1\275\3\0\1\276\62\0\1\277\4\0\1\300"+
    "\51\0\1\301\73\0\1\302\65\0\1\303\101\0\1\304"+
    "\74\0\1\305\50\0\1\306\61\0\1\307\2\0\1\310"+
    "\72\0\1\311\67\0\1\312\66\0\1\313\37\0\1\225"+
    "\1\133\6\0\2\133\45\0\1\226\1\133\6\0\2\37"+
    "\1\40\5\37\1\140\5\37\1\141\1\142\5\37\1\137"+
    "\42\37\2\0\1\314\5\0\1\144\5\0\1\145\1\146"+
    "\52\0\1\315\5\0\1\147\54\0\1\150\4\0\1\316"+
    "\5\0\1\151\14\0\1\52\36\0\1\44\3\0\2\7"+
    "\1\63\5\7\1\152\5\7\1\75\1\63\50\7\1\155"+
    "\2\77\10\155\1\237\2\155\1\240\1\317\50\155\17\241"+
    "\1\320\66\241\1\321\1\320\50\241\16\162\1\160\1\243"+
    "\50\162\26\0\1\322\73\0\1\323\77\0\1\324\62\0"+
    "\1\325\75\0\1\326\50\0\1\327\74\0\1\330\101\0"+
    "\1\331\50\0\1\332\101\0\1\333\3\0\1\334\56\0"+
    "\1\335\4\0\1\336\67\0\1\337\3\0\1\340\57\0"+
    "\1\341\74\0\1\342\77\0\1\343\54\0\1\344\57\0"+
    "\1\345\107\0\1\346\66\0\1\347\63\0\1\350\57\0"+
    "\1\351\1\0\1\352\62\0\1\353\100\0\1\354\36\0"+
    "\1\355\107\0\1\356\67\0\1\357\106\0\1\360\30\0"+
    "\1\361\123\0\1\362\60\0\1\363\103\0\1\364\46\0"+
    "\1\365\67\0\1\366\57\0\1\367\14\0\1\370\72\0"+
    "\1\371\63\0\1\372\63\0\1\373\103\0\1\374\65\0"+
    "\1\375\31\0\1\376\2\321\10\376\1\377\2\376\1\u0100"+
    "\51\376\16\241\1\77\1\320\51\241\2\321\6\241\2\321"+
    "\1\u0101\2\241\1\u0102\1\320\41\241\1\321\6\241\35\0"+
    "\1\u0103\75\0\1\u0104\50\0\1\u0105\75\0\1\u0106\70\0"+
    "\1\u0107\70\0\1\u0108\65\0\1\u0109\64\0\1\u010a\44\0"+
    "\1\u010b\45\0\1\u010b\41\0\1\u010c\72\0\1\u010d\54\0"+
    "\1\u010e\77\0\1\u010f\67\0\1\u0110\72\0\1\u0111\105\0"+
    "\1\u0112\51\0\1\u0113\103\0\1\u0114\63\0\1\u0115\62\0"+
    "\1\u0116\75\0\1\u0117\57\0\1\u0118\76\0\1\u0119\64\0"+
    "\1\u011a\63\0\1\u011b\103\0\1\u011c\27\0\1\u011d\121\0"+
    "\1\u011e\75\0\1\u011f\62\0\1\u0120\73\0\1\u0121\54\0"+
    "\1\u0122\63\0\1\u0123\110\0\1\u0124\46\0\1\u0125\106\0"+
    "\1\u0126\30\0\1\u0127\45\0\1\u0127\41\0\1\u0128\67\0"+
    "\1\u0129\43\0\1\376\2\321\10\376\1\377\2\376\1\u0100"+
    "\1\u012a\51\376\2\321\10\376\1\377\2\376\1\u0100\1\317"+
    "\50\376\16\241\1\376\1\u012b\50\241\14\0\1\u012c\116\0"+
    "\1\u012d\30\0\1\u012e\45\0\1\u012e\60\0\1\u012f\57\0"+
    "\1\u0130\65\0\1\u0131\102\0\1\u0132\64\0\1\u0133\56\0"+
    "\1\u0134\53\0\1\u0135\116\0\1\u0136\65\0\1\u0137\56\0"+
    "\1\u0138\71\0\1\u0139\100\0\1\u013a\63\0\1\u013b\54\0"+
    "\1\u013c\105\0\1\u013d\56\0\1\u013e\102\0\1\u013f\27\0"+
    "\1\u0140\45\0\1\u0140\46\0\1\u0141\67\0\1\u0142\65\0"+
    "\1\u0143\44\0\1\u0144\45\0\1\u0145\21\0\1\u0146\121\0"+
    "\1\u0147\55\0\1\u0148\107\0\1\u0149\55\0\1\u014a\35\0"+
    "\1\376\2\321\10\376\1\377\2\376\1\240\1\u012a\50\376"+
    "\16\241\1\321\1\242\50\241\24\0\1\u014b\100\0\1\u014c"+
    "\43\0\1\u014d\62\0\1\u014e\45\0\1\u014f\57\0\1\u0150"+
    "\57\0\1\u0151\66\0\1\u0152\62\0\1\u0153\100\0\1\u0154"+
    "\56\0\1\u0155\74\0\1\u0156\62\0\1\u0157\67\0\1\u0158"+
    "\56\0\2\u0159\1\u015a\6\0\1\u0159\4\0\1\u0159\2\0"+
    "\1\u0159\7\0\1\u0159\57\0\1\u015b\47\0\1\u014a\116\0"+
    "\1\u015c\56\0\1\u015d\67\0\1\u015e\72\0\1\u015f\64\0"+
    "\1\u0160\75\0\1\u0161\64\0\1\u0162\75\0\1\u0163\67\0"+
    "\1\u0164\70\0\1\u0165\47\0\1\u0166\75\0\1\u0167\66\0"+
    "\1\u0168\66\0\1\u0169\63\0\1\u016a\75\0\1\u016b\67\0"+
    "\1\u016c\41\0\1\u016d\107\0\1\u016e\102\0\1\u016f\44\0"+
    "\1\u0170\107\0\1\u0171\65\0\1\u0172\74\0\1\u0173\44\0"+
    "\1\u0174\116\0\1\u0175\30\0\1\u0176\45\0\1\u0176\31\0"+
    "\1\u0177\77\0\1\u0178\102\0\1\u0179\61\0\1\u017a\62\0"+
    "\1\u017b\73\0\1\u017c\70\0\1\u017d\67\0\1\u017e\67\0"+
    "\1\u017f\66\0\1\u0180\71\0\1\u0181\67\0\1\u0182\67\0"+
    "\1\u0183\67\0\1\u0184\66\0\1\u0185\77\0\1\u0186\70\0"+
    "\1\u0187\72\0\1\u0188\64\0\1\u0189\62\0\1\u018a\76\0"+
    "\1\u018b\47\0\1\u018c\104\0\1\u018d\71\0\1\u018e\71\0"+
    "\1\u018f\36\0\1\u0190\101\0\1\u0191\67\0\1\u0192\73\0"+
    "\1\u0193\71\0\1\u0194\47\0\1\u0195\101\0\1\u0196\75\0"+
    "\1\u0197\62\0\1\u0198\103\0\1\u0199\53\0\1\u019a\103\0"+
    "\1\u019b\56\0\1\u019c\67\0\1\u019d\67\0\1\u019e\64\0"+
    "\1\u019f\104\0\1\u01a0\65\0\1\u01a1\67\0\1\u01a2\56\0"+
    "\1\u01a3\62\0\1\u01a4\67\0\1\u01a5\100\0\1\u01a6\75\0"+
    "\1\u01a7\72\0\1\u01a8\25\0\1\u01a9\45\0\1\u01aa\45\0"+
    "\1\u01ab\43\0\1\u01aa\45\0\1\u01aa\41\0\1\u01ac\111\0"+
    "\1\u01ad\60\0\1\u01ae\54\0\1\u01af\67\0\1\u01b0\110\0"+
    "\1\u01b1\54\0\1\u01b2\51\0\1\u01b3\102\0\1\u01b4\53\0"+
    "\2\u01a8\1\u01b5\6\0\1\u01a8\4\0\1\u01a8\2\0\1\u01a8"+
    "\7\0\1\u01a8\67\0\1\u01b6\67\0\1\u01b7\52\0\1\u01b8"+
    "\74\0\1\u01b9\46\0\2\u01ba\1\u01bb\6\0\1\u01ba\4\0"+
    "\1\u01ba\2\0\1\u01ba\7\0\1\u01ba\66\0\1\u01bc\50\0"+
    "\1\u01bd\100\0\1\u01be\45\0\2\u01b5\7\0\1\u01b5\4\0"+
    "\1\u01b5\2\0\1\u01b5\7\0\1\u01b5\55\0\1\u01bf\67\0"+
    "\1\u01c0\51\0\1\u01c1\57\0\1\u01c2\45\0\1\u01c2\45\0"+
    "\1\u01c3\63\0\1\u01c4\67\0\1\u01c5\106\0\1\u01c6\65\0"+
    "\1\u01c7\62\0\1\u01c8\67\0\1\u01c9\62\0\1\u01ca\67\0"+
    "\1\u01cb\74\0\1\u01cc\75\0\1\u01cd\31\0\1\u01ce\107\0"+
    "\1\u01cf\107\0\1\u01d0\37\0\1\u01d1\104\0\1\u01d2\70\0"+
    "\1\u01d3\51\0\1\u01d4\77\0\1\u01d5\75\0\1\u01d6\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\3\1\2\11\5\1\5\11\1\1\3\0"+
    "\2\1\1\11\3\1\3\11\1\1\2\11\4\1\1\11"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\11\2\0\1\1\5\0\1\11"+
    "\20\0\1\11\3\0\1\11\2\0\2\1\1\11\1\0"+
    "\2\11\1\0\1\11\2\0\2\11\2\0\2\11\1\1"+
    "\2\0\1\1\41\0\4\11\5\0\1\1\4\0\1\1"+
    "\77\0\2\11\12\0\1\11\3\0\2\11\3\0\1\1"+
    "\5\0\1\1\1\0\1\1\2\0\1\11\2\0\1\11"+
    "\12\0\1\11\1\0\1\11\2\0\1\11\2\0\2\11"+
    "\6\0\1\1\1\0\1\11\3\0\1\11\6\0\1\1"+
    "\1\11\11\0\1\1\1\0\1\1\15\0\2\11\14\0"+
    "\1\11\1\0\1\11\14\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\1\11\6\0\1\11\7\0\2\11\12\0"+
    "\2\11\13\0\1\11\1\0\1\11\5\0\1\11\3\0"+
    "\1\1\4\0\1\1\1\0\4\11\2\0\1\1\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\1\11\4\0"+
    "\2\11\7\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _BisonLexer() {
    this((java.io.Reader)null);
  }
  int percent_percent_count = 0;
  int nesting = 0;
  int context_state;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case SC_PROLOGUE: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 471: break;
            case SC_BRACED_CODE: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 472: break;
            case SC_PREDICATE: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 473: break;
            case SC_EPILOGUE: {
              yybegin(YYINITIAL); return EPILOGUE_LITERAL;
            }  // fall though
            case 474: break;
            case SC_TAG: {
              throw new Error("unexpected_eof");
            }  // fall though
            case 475: break;
            case SC_COMMENT: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 476: break;
            case SC_LINE_COMMENT: {
              yybegin(context_state);
            }  // fall though
            case 477: break;
            case SC_ESCAPED_CHARACTER: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 478: break;
            case SC_ESCAPED_STRING: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 479: break;
            case SC_ESCAPED_TSTRING: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 480: break;
            case SC_STRING: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 481: break;
            case SC_CHARACTER: {
              throw new Error("Unexpected EOF");
            }  // fall though
            case 482: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 91: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 3: 
            { return ID;
            } 
            // fall through
          case 93: break;
          case 4: 
            { return BisonTokenType.token(":");
            } 
            // fall through
          case 94: break;
          case 5: 
            { return BisonTokenType.token("=");
            } 
            // fall through
          case 95: break;
          case 6: 
            { return INT_LITERAL;
            } 
            // fall through
          case 96: break;
          case 7: 
            { return BisonTokenType.token("|");
            } 
            // fall through
          case 97: break;
          case 8: 
            { return BisonTokenType.token(";");
            } 
            // fall through
          case 98: break;
          case 9: 
            { yybegin(SC_ESCAPED_CHARACTER);
            } 
            // fall through
          case 99: break;
          case 10: 
            { yybegin(SC_ESCAPED_STRING);
            } 
            // fall through
          case 100: break;
          case 11: 
            { nesting = 0; yybegin(SC_BRACED_CODE);
            } 
            // fall through
          case 101: break;
          case 12: 
            { nesting = 0; yybegin(SC_TAG);
            } 
            // fall through
          case 102: break;
          case 13: 
            { context_state = yystate(); yybegin(SC_CHARACTER);
            } 
            // fall through
          case 103: break;
          case 14: 
            { context_state = yystate(); yybegin(SC_STRING);
            } 
            // fall through
          case 104: break;
          case 15: 
            { /* do nothing */
            } 
            // fall through
          case 105: break;
          case 16: 
            { nesting++;
            } 
            // fall through
          case 106: break;
          case 17: 
            { if (--nesting < 0) { yybegin(YYINITIAL); return BRACED_CODE_LITERAL; }
            } 
            // fall through
          case 107: break;
          case 18: 
            { if (--nesting < 0) { yybegin(YYINITIAL); return PREDICATE_LITERAL; }
            } 
            // fall through
          case 108: break;
          case 19: 
            { nesting += yylength();
            } 
            // fall through
          case 109: break;
          case 20: 
            { if (--nesting < 0) { yybegin(YYINITIAL); return TAG_TAG; }
            } 
            // fall through
          case 110: break;
          case 21: 
            { yybegin(context_state);
            } 
            // fall through
          case 111: break;
          case 22: 
            { yybegin(YYINITIAL); return CHAR_LITERAL;
            } 
            // fall through
          case 112: break;
          case 23: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 113: break;
          case 24: 
            { throw new Error("Unexpected EOL");
            } 
            // fall through
          case 114: break;
          case 25: 
            { yypushback(1); return ID_COLON;
            } 
            // fall through
          case 115: break;
          case 26: 
            { return COMMENT;
            } 
            // fall through
          case 116: break;
          case 27: 
            { if(++percent_percent_count == 2) yybegin(SC_EPILOGUE); return BisonTokenType.token("%%");
            } 
            // fall through
          case 117: break;
          case 28: 
            { yybegin(SC_PROLOGUE);
            } 
            // fall through
          case 118: break;
          case 29: 
            { return TAG_NONE;
            } 
            // fall through
          case 119: break;
          case 30: 
            { context_state = yystate(); yybegin(SC_LINE_COMMENT);
            } 
            // fall through
          case 120: break;
          case 31: 
            { context_state = yystate(); yybegin(SC_COMMENT);
            } 
            // fall through
          case 121: break;
          case 32: 
            { yybegin(YYINITIAL); return PROLOGUE_LITERAL;
            } 
            // fall through
          case 122: break;
          case 33: 
            { nesting--;
            } 
            // fall through
          case 123: break;
          case 34: 
            { yybegin(YYINITIAL); return TSTRING;
            } 
            // fall through
          case 124: break;
          case 35: 
            { return BRACKETED_ID;
            } 
            // fall through
          case 125: break;
          case 36: 
            { nesting = 0; yybegin(SC_PREDICATE);
            } 
            // fall through
          case 126: break;
          case 37: 
            { yybegin(SC_ESCAPED_TSTRING);
            } 
            // fall through
          case 127: break;
          case 38: 
            { return TAG_ANY;
            } 
            // fall through
          case 128: break;
          case 39: 
            { yypushback(2);
            } 
            // fall through
          case 129: break;
          case 40: 
            { return BisonTokenType.directive("yacc");
            } 
            // fall through
          case 130: break;
          case 41: 
            { return BisonTokenType.directive ("CODE");
            } 
            // fall through
          case 131: break;
          case 42: 
            { return BisonTokenType.directive("LEFT");
            } 
            // fall through
          case 132: break;
          case 43: 
            { return BisonTokenType.directive("TOKEN");
            } 
            // fall through
          case 133: break;
          case 44: 
            { return BisonTokenType.directive("type");
            } 
            // fall through
          case 134: break;
          case 45: 
            { return BisonTokenType.directive("prec");
            } 
            // fall through
          case 135: break;
          case 46: 
            { return BisonTokenType.directive("start");
            } 
            // fall through
          case 136: break;
          case 47: 
            { return BisonTokenType.directive("EMPTY");
            } 
            // fall through
          case 137: break;
          case 48: 
            { return BisonTokenType.directive("NTERM");
            } 
            // fall through
          case 138: break;
          case 49: 
            { return BisonTokenType.directive("right");
            } 
            // fall through
          case 139: break;
          case 50: 
            { return BisonTokenType.directive ("DEBUG");
            } 
            // fall through
          case 140: break;
          case 51: 
            { return BisonTokenType.directive("DPREC");
            } 
            // fall through
          case 141: break;
          case 52: 
            { return BisonTokenType.directive("union");
            } 
            // fall through
          case 142: break;
          case 53: 
            { return BisonTokenType.directive("token");
            } 
            // fall through
          case 143: break;
          case 54: 
            { return BisonTokenType.directive("param");
            } 
            // fall through
          case 144: break;
          case 55: 
            { return BisonTokenType.directive("MERGE");
            } 
            // fall through
          case 145: break;
          case 56: 
            { return BisonTokenType.directive("EXPECT");
            } 
            // fall through
          case 146: break;
          case 57: 
            { return BisonTokenType.directive("BINARY");
            } 
            // fall through
          case 147: break;
          case 58: 
            { return BisonTokenType.directive("OUTPUT");
            } 
            // fall through
          case 148: break;
          case 59: 
            { return BisonTokenType.directive("DEFINE");
            } 
            // fall through
          case 149: break;
          case 60: 
            { return BisonTokenType.directive("HEADER");
            } 
            // fall through
          case 150: break;
          case 61: 
            { return BisonTokenType.directive("VERBOSE");
            } 
            // fall through
          case 151: break;
          case 62: 
            { return BisonTokenType.directive("REQUIRE");
            } 
            // fall through
          case 152: break;
          case 63: 
            { return BisonTokenType.directive("%output");
            } 
            // fall through
          case 153: break;
          case 64: 
            { return BisonTokenType.directive("PRINTER");
            } 
            // fall through
          case 154: break;
          case 65: 
            { return BisonTokenType.directive("SKELETON");
            } 
            // fall through
          case 155: break;
          case 66: 
            { return BisonTokenType.directive("NO_LINES");
            } 
            // fall through
          case 156: break;
          case 67: 
            { return BisonTokenType.directive("nonassoc");
            } 
            // fall through
          case 157: break;
          case 68: 
            { return BisonTokenType.directive("%no-lines");
            } 
            // fall through
          case 158: break;
          case 69: 
            { return BisonTokenType.directive("LANGUAGE");
            } 
            // fall through
          case 159: break;
          case 70: 
            { return BisonTokenType.directive("EXPECT_RR");
            } 
            // fall through
          case 160: break;
          case 71: 
            { return BisonTokenType.directive("expect-rr");
            } 
            // fall through
          case 161: break;
          case 72: 
            { return BisonTokenType.directive("lex-param");
            } 
            // fall through
          case 162: break;
          case 73: 
            { return BisonTokenType.directive("locations");
            } 
            // fall through
          case 163: break;
          case 74: 
            { return BisonTokenType.directive("DESTRUCTOR");
            } 
            // fall through
          case 164: break;
          case 75: 
            { return BisonTokenType.directive("GLR_PARSER");
            } 
            // fall through
          case 165: break;
          case 76: 
            { return BisonTokenType.directive("PRECEDENCE");
            } 
            // fall through
          case 166: break;
          case 77: 
            { return BisonTokenType.directive("NAME_PREFIX");
            } 
            // fall through
          case 167: break;
          case 78: 
            { return BisonTokenType.directive("FILE-PREFIX");
            } 
            // fall through
          case 168: break;
          case 79: 
            { return BisonTokenType.directive("TOKEN_TABLE");
            } 
            // fall through
          case 169: break;
          case 80: 
            { return BisonTokenType.directive("%token-table");
            } 
            // fall through
          case 170: break;
          case 81: 
            { return BisonTokenType.directive("parse-param");
            } 
            // fall through
          case 171: break;
          case 82: 
            { return BisonTokenType.directive("PURE_PARSER");
            } 
            // fall through
          case 172: break;
          case 83: 
            { return BisonTokenType.directive("DEFAULT_PREC");
            } 
            // fall through
          case 173: break;
          case 84: 
            { return BisonTokenType.directive("PERCENT_FILE_PREFIX");
            } 
            // fall through
          case 174: break;
          case 85: 
            { return BisonTokenType.directive("ERROR_VERBOSE");
            } 
            // fall through
          case 175: break;
          case 86: 
            { return BisonTokenType.directive("INITIAL_ACTION");
            } 
            // fall through
          case 176: break;
          case 87: 
            { return BisonTokenType.directive("NO_DEFAULT_PREC");
            } 
            // fall through
          case 177: break;
          case 88: 
            { return BisonTokenType.directive("%no-default-prec");
            } 
            // fall through
          case 178: break;
          case 89: 
            { return BisonTokenType.directive("%output \"y.tab.c\"");
            } 
            // fall through
          case 179: break;
          case 90: 
            { return BisonTokenType.directive("NONDETERMINISTIC_PARSER");
            } 
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
